// ==UserScript==
// @name         HTML Container to PDF book
// @namespace   
// @version      0.1
// @description  Select a container to turn into a PDF
// @author       Mathis
// @require      http://code.jquery.com/jquery-3.4.1.min.js
// @grant        GM_xmlhttpRequest
// @grant        GM_registerMenuCommand
// @match        
// ==/UserScript==

var $ = window.$;

const contentID = "content";

const pixelPerMm = 12;
const edgesInMm = 20;
const rimsInMm = 20;
const pagesPerSite = 2;
const pageWidthInMm = 213;
const pageHeightInMm = 303;
const rimOffset = 2;

const widthInMm = pageWidthInMm * pagesPerSite;
const heightInMm = pageHeightInMm;
var contentElm;

(function() {
    'use strict';
       GM_xmlhttpRequest({
        method : "GET",
        url : "https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.min.js",
        onload : (ev) =>
        {
            let e = document.createElement('script');
            e.innerText = ev.responseText;
            document.head.appendChild(e);
        }
    });
      GM_xmlhttpRequest({
        method : "GET",
        url : "https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.5/jspdf.min.js",
        onload : (ev) =>
        {
            let e = document.createElement('script');
            e.innerText = ev.responseText;
            document.head.appendChild(e);
        }
    });
      contentElm = $('#'+contentID);
      if(contentElm) {
      	 GM_registerMenuCommand('Save page content as PDF', function() {
         containerToPDF();
		 }, 'r'); }

})();

function containerToPDF() {

       domtoimage.toPng(document.getElementById(contentID))
       	 .then(function (blob) {

        	var pdf = new jsPDF('l', 'pt', [(widthInMm)*pixelPerMm, heightInMm*pixelPerMm]);

       		// Rescaling the image to the wanted resolution.
        	// Image Height: (Current Height) * ((Wanted Height) / (Current Height / 12)). Values in Pixel.
        	var rescalingFactor = (pageWidthInMm - edgesInMm*2) / (contentElm.width() / pixelPerMm);
        	var imageWidth = contentElm.width() * rescalingFactor;
        	var imageHeight = contentElm.height() * rescalingFactor;

        	// Creating a footer and a header to cut the edges of the image.
        	var footerWidth = widthInMm * pixelPerMm;
        	var footerHeight = rimsInMm * pixelPerMm;
        	var canvas = document.createElement('canvas');
        	document.body.appendChild(canvas);
        	var ctx = canvas.getContext('2d');
        	ctx.globalAlpha = 0.95;
        	ctx.fillStyle = 'white';
        	ctx.fillRect(0, 0, footerWidth, footerHeight);
        	var imgData = canvas.toDataURL();

        	// Number of pages the Image has to be split up to.
        	var numberOfPages = Math.ceil((imageHeight/pixelPerMm) / heightInMm); // If >1, multiple pages
        	// Based on the rim height, we may need extra pages to fit all images.
        	var extraPages = Math.round((rimsInMm * numberOfPages * 2) / heightInMm);
       		// Creating the pages and addin images.
        	var totalPages = extraPages + numberOfPages;

     	    for(var i = 0; i < totalPages; i++) {
				pdf.addImage(blob, 'PNG', (i%2*pageWidthInMm*pixelPerMm)+edgesInMm*pixelPerMm, rimsInMm*pixelPerMm - i*(heightInMm-rimsInMm*2-rimOffset)*pixelPerMm, imageWidth, imageHeight);
                pdf.addImage(imgData, 0, (heightInMm * pixelPerMm)-(rimsInMm*pixelPerMm), footerWidth, footerHeight);
                pdf.addImage(imgData, 0, 0, footerWidth, footerHeight);
                if(i%2==1) {
                	pdf.addPage('l', 'pt', [(widthInMm)*pixelPerMm, heightInMm*pixelPerMm]);
            	}
             }
            pdf.save("htmlToPdf.pdf");
            canvas.remove();
        });
 }




